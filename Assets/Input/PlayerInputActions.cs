//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""08bf0e76-e4df-4381-9232-a106aaef8ea5"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""c493f7a3-93c3-44ee-9133-6c4159c44c53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""752351b2-95ee-40e5-9caa-ccbfecd2b333"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""f88329ab-5116-4b21-8425-c7af892ac342"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Self Destruct"",
                    ""type"": ""Button"",
                    ""id"": ""55689b42-67a0-493f-a95a-d92409a79d4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Charge Beam"",
                    ""type"": ""Button"",
                    ""id"": ""d6a63de4-3bde-4ff1-b402-04902a7fc2e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=2.5)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""36a0ad2c-ca91-4fa8-8eea-e64453990b75"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""82732e34-2f75-4010-a47f-11598684689f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c33b8aba-aeee-4157-8e99-fe567b56e4e4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""34f1afbc-5f66-4948-bc12-155f91e1768e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c680a4c9-54c8-4c85-b91c-dcf6810a3e89"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2f324b82-e844-41e1-8c97-a5e948bc92fb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c057cc24-a1a8-4aae-932b-be9feef7e136"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""745e870b-f411-46cb-812f-7e0eb8bc63bc"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Self Destruct"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""df97c566-20f9-4472-b045-4b60387364ed"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Self Destruct"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""c545c125-7660-4571-b441-be30e6d2cc0e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Self Destruct"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1b75cc60-a216-405e-9e3c-86c48ca84597"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge Beam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2"",
            ""id"": ""419336d1-6010-4a6e-b7af-fb028abbcd57"",
            ""actions"": [
                {
                    ""name"": ""ChangeColor"",
                    ""type"": ""Button"",
                    ""id"": ""381e0b97-ff50-480d-a1e2-9e745f9570e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""831cf64f-5282-4edf-b8a1-bd81fcbd3422"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1a4d91e3-2758-4da7-b5f9-eefcad132eb4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeColor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""062256fb-3527-4d25-bf8f-757ffbeb068c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3f21c559-4df6-472d-80c9-7b30427193cc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""df4e563d-b838-4bcf-af5e-dfa03742a0fb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""657572e5-f2bd-4f72-82df-1336749fd735"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""56afbc66-5789-4269-ae28-4a69e2663ac3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ed21c4de-c868-4da8-9e52-aecbb145cb0f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Ball"",
            ""id"": ""3fd55cff-a5e8-4ced-8d7f-996e14c5febf"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2ce18e3f-2d26-43e3-ae2f-28f637a534c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""103404e4-1921-4d0e-8e67-e8629f0fd92e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MobileCube"",
            ""id"": ""fc886a07-93d0-414b-b899-98b98e199f22"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""00232261-5917-4052-8063-b97083c94417"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd29c9bd-64ed-4cbb-be37-b9ebcbeab283"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ChargeBar"",
            ""id"": ""8e8af4c0-6f35-4f78-b057-62ac9160fadb"",
            ""actions"": [
                {
                    ""name"": ""Charge"",
                    ""type"": ""Button"",
                    ""id"": ""14e3a69e-d6d4-4f1d-a54b-4442b40b1452"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""75f09c2e-4d27-4593-896c-5d39dec84993"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Fire = m_Player.FindAction("Fire", throwIfNotFound: true);
        m_Player_Walk = m_Player.FindAction("Walk", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_SelfDestruct = m_Player.FindAction("Self Destruct", throwIfNotFound: true);
        m_Player_ChargeBeam = m_Player.FindAction("Charge Beam", throwIfNotFound: true);
        // Player2
        m_Player2 = asset.FindActionMap("Player2", throwIfNotFound: true);
        m_Player2_ChangeColor = m_Player2.FindAction("ChangeColor", throwIfNotFound: true);
        m_Player2_Rotate = m_Player2.FindAction("Rotate", throwIfNotFound: true);
        // Ball
        m_Ball = asset.FindActionMap("Ball", throwIfNotFound: true);
        m_Ball_Jump = m_Ball.FindAction("Jump", throwIfNotFound: true);
        // MobileCube
        m_MobileCube = asset.FindActionMap("MobileCube", throwIfNotFound: true);
        m_MobileCube_Move = m_MobileCube.FindAction("Move", throwIfNotFound: true);
        // ChargeBar
        m_ChargeBar = asset.FindActionMap("ChargeBar", throwIfNotFound: true);
        m_ChargeBar_Charge = m_ChargeBar.FindAction("Charge", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Fire;
    private readonly InputAction m_Player_Walk;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_SelfDestruct;
    private readonly InputAction m_Player_ChargeBeam;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Player_Fire;
        public InputAction @Walk => m_Wrapper.m_Player_Walk;
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        public InputAction @SelfDestruct => m_Wrapper.m_Player_SelfDestruct;
        public InputAction @ChargeBeam => m_Wrapper.m_Player_ChargeBeam;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Fire.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Walk.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalk;
                @Sprint.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @SelfDestruct.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelfDestruct;
                @SelfDestruct.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelfDestruct;
                @SelfDestruct.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelfDestruct;
                @ChargeBeam.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChargeBeam;
                @ChargeBeam.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChargeBeam;
                @ChargeBeam.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChargeBeam;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @SelfDestruct.started += instance.OnSelfDestruct;
                @SelfDestruct.performed += instance.OnSelfDestruct;
                @SelfDestruct.canceled += instance.OnSelfDestruct;
                @ChargeBeam.started += instance.OnChargeBeam;
                @ChargeBeam.performed += instance.OnChargeBeam;
                @ChargeBeam.canceled += instance.OnChargeBeam;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Player2
    private readonly InputActionMap m_Player2;
    private IPlayer2Actions m_Player2ActionsCallbackInterface;
    private readonly InputAction m_Player2_ChangeColor;
    private readonly InputAction m_Player2_Rotate;
    public struct Player2Actions
    {
        private @PlayerInputActions m_Wrapper;
        public Player2Actions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeColor => m_Wrapper.m_Player2_ChangeColor;
        public InputAction @Rotate => m_Wrapper.m_Player2_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Player2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer2Actions instance)
        {
            if (m_Wrapper.m_Player2ActionsCallbackInterface != null)
            {
                @ChangeColor.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnChangeColor;
                @ChangeColor.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnChangeColor;
                @ChangeColor.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnChangeColor;
                @Rotate.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_Player2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeColor.started += instance.OnChangeColor;
                @ChangeColor.performed += instance.OnChangeColor;
                @ChangeColor.canceled += instance.OnChangeColor;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public Player2Actions @Player2 => new Player2Actions(this);

    // Ball
    private readonly InputActionMap m_Ball;
    private IBallActions m_BallActionsCallbackInterface;
    private readonly InputAction m_Ball_Jump;
    public struct BallActions
    {
        private @PlayerInputActions m_Wrapper;
        public BallActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Ball_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Ball; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallActions set) { return set.Get(); }
        public void SetCallbacks(IBallActions instance)
        {
            if (m_Wrapper.m_BallActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_BallActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BallActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BallActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_BallActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public BallActions @Ball => new BallActions(this);

    // MobileCube
    private readonly InputActionMap m_MobileCube;
    private IMobileCubeActions m_MobileCubeActionsCallbackInterface;
    private readonly InputAction m_MobileCube_Move;
    public struct MobileCubeActions
    {
        private @PlayerInputActions m_Wrapper;
        public MobileCubeActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MobileCube_Move;
        public InputActionMap Get() { return m_Wrapper.m_MobileCube; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileCubeActions set) { return set.Get(); }
        public void SetCallbacks(IMobileCubeActions instance)
        {
            if (m_Wrapper.m_MobileCubeActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MobileCubeActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MobileCubeActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MobileCubeActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_MobileCubeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public MobileCubeActions @MobileCube => new MobileCubeActions(this);

    // ChargeBar
    private readonly InputActionMap m_ChargeBar;
    private IChargeBarActions m_ChargeBarActionsCallbackInterface;
    private readonly InputAction m_ChargeBar_Charge;
    public struct ChargeBarActions
    {
        private @PlayerInputActions m_Wrapper;
        public ChargeBarActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Charge => m_Wrapper.m_ChargeBar_Charge;
        public InputActionMap Get() { return m_Wrapper.m_ChargeBar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChargeBarActions set) { return set.Get(); }
        public void SetCallbacks(IChargeBarActions instance)
        {
            if (m_Wrapper.m_ChargeBarActionsCallbackInterface != null)
            {
                @Charge.started -= m_Wrapper.m_ChargeBarActionsCallbackInterface.OnCharge;
                @Charge.performed -= m_Wrapper.m_ChargeBarActionsCallbackInterface.OnCharge;
                @Charge.canceled -= m_Wrapper.m_ChargeBarActionsCallbackInterface.OnCharge;
            }
            m_Wrapper.m_ChargeBarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Charge.started += instance.OnCharge;
                @Charge.performed += instance.OnCharge;
                @Charge.canceled += instance.OnCharge;
            }
        }
    }
    public ChargeBarActions @ChargeBar => new ChargeBarActions(this);
    public interface IPlayerActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnSelfDestruct(InputAction.CallbackContext context);
        void OnChargeBeam(InputAction.CallbackContext context);
    }
    public interface IPlayer2Actions
    {
        void OnChangeColor(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IBallActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IMobileCubeActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IChargeBarActions
    {
        void OnCharge(InputAction.CallbackContext context);
    }
}
